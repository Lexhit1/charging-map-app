# Dockerfile

# --- Этап 1: Сборка образа PHP-FPM с зависимостями приложения ---
# Используем базовый образ PHP версии 8.2 с FPM и Alpine Linux
FROM php:8.2-fpm-alpine AS php_app

# Устанавливаем системные зависимости, необходимые для PHP расширений и Composer
# 'apk add --no-cache' - это команда для установки пакетов в Alpine Linux
# 'git' и 'unzip' часто нужны для Composer
# ДОБАВЛЯЕМ 'libxml2-dev' - это исправит ошибку "libxml-2.0 >= 2.9.0"
RUN apk add --no-cache \
    git \
    unzip \
    libxml2-dev \
    # Добавьте здесь другие необходимые системные пакеты, если они нужны для ваших PHP-расширений
    # Например, если вы используете GD библиотеку для работы с изображениями:
    # libpng-dev \
    # libjpeg-turbo-dev \
    # freetype-dev \
    # Если вам нужно установить конкретные PHP-расширения, это делается так (пример):
    # && docker-php-ext-install pdo_mysql gd exif bcmath opcache xml

# Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды будут выполняться относительно этой директории.
WORKDIR /var/www/html

# ОЧЕНЬ ВАЖНО: КОПИРУЕМ ВСЕ ФАЙЛЫ ПРИЛОЖЕНИЯ В КОНТЕЙНЕР
# Это включает 'composer.json', 'composer.lock', и главное - файл 'artisan'.
# Этот шаг ДОЛЖЕН происходить ДО запуска 'composer install',
# чтобы 'artisan' был доступен, когда Composer будет выполнять свои скрипты.
COPY . .

# Устанавливаем PHP зависимости с помощью Composer
# '--no-dev': не устанавливать пакеты, которые нужны только для разработки
# '--optimize-autoloader': оптимизировать автозагрузчик классов для более быстрой работы приложения
# '--no-interaction': не запрашивать ввод пользователя во время установки
RUN composer install \-\-no\-dev \-\-optimize\-autoloader \-\-no\-interaction

\# Устанавливаем правильные права доступа для директорий 'storage' и 'bootstrap/cache'
\# Это необходимо, чтобы приложение могло записывать данные \(логи, кэш, сессии и т\.д\.\)
\# 'chown \-R www\-data:www\-data' меняет владельца на пользователя 'www\-data' \(стандартный пользователь для веб\-серверов\)
\# 'chmod \-R 775' дает права на чтение, запись и выполнение для владельца и группы
RUN chown \-R www\-data:www\-data /var/www/html \\
    && chmod \-R 775 /var/www/html/storage \\
    && chmod \-R 775 /var/www/html/bootstrap/cache

\# Порт 9000 \- это стандартный порт для PHP\-FPM\. Он будет использоваться веб\-сервером Nginx для связи с PHP\.
EXPOSE 9000

\# Команда, которая запускается при старте контейнера: запуск PHP\-FPM
CMD \["php\-fpm"\]


\# \-\-\- Этап 2: Сборка образа Nginx \-\-\-
\# Используем базовый образ Nginx с Alpine Linux
FROM nginx:alpine AS nginx\_app

\# Удаляем стандартную конфигурацию Nginx, чтобы использовать свою
RUN rm /etc/nginx/conf\.d/default\.conf

\# Копируем нашу кастомную конфигурацию Nginx
\# Убедитесь, что у вас есть папка 'nginx' в корне вашего проекта, а внутри нее файл 'nginx\.conf'\.
\# Например, ваш проект должен выглядеть так:
\# ваш\_проект/
\# ├── Dockerfile
\# ├── docker\-compose\.yml
\# ├── nginx/
\# │   └── nginx\.conf
\# └── \.\.\. \(остальные файлы проекта\)
COPY nginx/nginx\.conf /etc/nginx/conf\.d/default\.conf

\# Копируем все файлы приложения из предыдущей стадии сборки \(php\_app\)
\# Это нужно, чтобы Nginx мог отдавать статические файлы \(CSS, JS, изображения\)
\# и правильно перенаправлять запросы к PHP\-FPM\.
COPY \-\-from\=php\_app /var/www/html /var/www/html

\# Порт 80 \- это стандартный порт для веб\-сервера \(HTTP\)\.
\# Через этот порт пользователи будут обращаться к твоему приложению\.
EXPOSE 80

\# Команда, которая запускается при старте контейнера: запуск Nginx
CMD \["nginx", "\-g", "daemon off;"\]